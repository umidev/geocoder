#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PrecisionType:
  CITY = 1
  ZIP = 2
  STREET = 3
  INTERSECTION = 4
  RANGE = 5

  _VALUES_TO_NAMES = {
    1: "CITY",
    2: "ZIP",
    3: "STREET",
    4: "INTERSECTION",
    5: "RANGE",
  }

  _NAMES_TO_VALUES = {
    "CITY": 1,
    "ZIP": 2,
    "STREET": 3,
    "INTERSECTION": 4,
    "RANGE": 5,
  }

class GeocodeResult:
  """
  Attributes:
   - address
   - lon
   - lat
   - precision
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'address', (TType.STRING,None,TType.STRING,None), None, ), # 1
    (2, TType.DOUBLE, 'lon', None, None, ), # 2
    (3, TType.DOUBLE, 'lat', None, None, ), # 3
    (4, TType.I32, 'precision', None, None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
  )

  def __init__(self, address=None, lon=None, lat=None, precision=None, score=None,):
    self.address = address
    self.lon = lon
    self.lat = lat
    self.precision = precision
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.address = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.address[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.lon = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.lat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.precision = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GeocodeResult')
    if self.address != None:
      oprot.writeFieldBegin('address', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.address))
      for kiter7,viter8 in self.address.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.lon != None:
      oprot.writeFieldBegin('lon', TType.DOUBLE, 2)
      oprot.writeDouble(self.lon)
      oprot.writeFieldEnd()
    if self.lat != None:
      oprot.writeFieldBegin('lat', TType.DOUBLE, 3)
      oprot.writeDouble(self.lat)
      oprot.writeFieldEnd()
    if self.precision != None:
      oprot.writeFieldBegin('precision', TType.I32, 4)
      oprot.writeI32(self.precision)
      oprot.writeFieldEnd()
    if self.score != None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GeocodeResults:
  """
  Attributes:
   - results
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'results', (TType.STRUCT,(GeocodeResult, GeocodeResult.thrift_spec)), None, ), # 1
  )

  def __init__(self, results=None,):
    self.results = results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.results = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = GeocodeResult()
            _elem14.read(iprot)
            self.results.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GeocodeResults')
    if self.results != None:
      oprot.writeFieldBegin('results', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.results))
      for iter15 in self.results:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

