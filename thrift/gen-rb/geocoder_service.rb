#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'gcgeocoder_types'

    module GeocommonsGeocoderThrift
      module GeocoderService
        class Client
          include ::Thrift::Client

          def geocode(address)
            send_geocode(address)
            return recv_geocode()
          end

          def send_geocode(address)
            send_message('geocode', Geocode_args, :address => address)
          end

          def recv_geocode()
            result = receive_message(Geocode_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'geocode failed: unknown result')
          end

          def batch_geocode(addresses)
            send_batch_geocode(addresses)
            return recv_batch_geocode()
          end

          def send_batch_geocode(addresses)
            send_message('batch_geocode', Batch_geocode_args, :addresses => addresses)
          end

          def recv_batch_geocode()
            result = receive_message(Batch_geocode_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'batch_geocode failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_geocode(seqid, iprot, oprot)
            args = read_args(iprot, Geocode_args)
            result = Geocode_result.new()
            result.success = @handler.geocode(args.address)
            write_result(result, oprot, 'geocode', seqid)
          end

          def process_batch_geocode(seqid, iprot, oprot)
            args = read_args(iprot, Batch_geocode_args)
            result = Batch_geocode_result.new()
            result.success = @handler.batch_geocode(args.addresses)
            write_result(result, oprot, 'batch_geocode', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Geocode_args
          include ::Thrift::Struct
          ADDRESS = 1

          ::Thrift::Struct.field_accessor self, :address
          FIELDS = {
            ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Geocode_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => GeocommonsGeocoderThrift::GeocodeResults}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Batch_geocode_args
          include ::Thrift::Struct
          ADDRESSES = 1

          ::Thrift::Struct.field_accessor self, :addresses
          FIELDS = {
            ADDRESSES => {:type => ::Thrift::Types::LIST, :name => 'addresses', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Batch_geocode_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => GeocommonsGeocoderThrift::GeocodeResults}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end

    end
